/*
Copyright (c) 2014 Ryo Konomura

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <errno.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <signal.h>
#include <time.h>
#include <sys/time.h>
#include <termios.h>
#include "cv.h"
#include "cxcore.h"
#include "highgui.h"
#include "pxlib.h"
#include "parameter.h"

static int hlength = 320;
static int vlength = 240;

static void timerhandler(int i);
static void setup_timer();

static char timer_disable = 0;

const px_cameraid cameraid = PX_FRONT_CAM;

int main(int argc, char **argv)
{
  int i,j,count;
  count = 0;

  //client
  int client_sockfd;
  int len ;
  struct sockaddr_un address;
  int result ;
  client_sockfd = socket(AF_UNIX,SOCK_STREAM,0);
  address.sun_family = AF_UNIX ;
  strcpy(address.sun_path , "/root/nodejs/projects/imgserver/mysocket");
  len = sizeof(address);
  result = connect(client_sockfd , (struct sockaddr *)&address , len);
  printf("result:%d\n",result);
  if(result != 0) {exit(-1);}
  //!client

  pxinit_chain();
  set_parameter();   
  printf("CPU0:Start Initialization. Please do not move Phenox.\n");
  while(!pxget_cpu1ready());
  setup_timer();
  printf("CPU0:Finished Initialization.\n");
  
  CvMat *mat;

  int param[]={CV_IMWRITE_JPEG_QUALITY,70};
  IplImage *testImage;    
  count = 0;

  pxset_led(0,1); 
  //featurelog
  const int ftmax = 200;
  px_imgfeature *ft =(px_imgfeature *)calloc(ftmax,sizeof(px_imgfeature));
  int ftstate = 0;
  //!featurelog

  while(1) {         
    if(pxget_imgfullwcheck(cameraid,&testImage) == 1) {	
      //featurelog
      if(ftstate == 1) {
	int ftnum = pxget_imgfeature(ft,ftmax);
	if(ftnum >= 0) {
	  for(i = 0;i < ftnum;i++) {
	    cvCircle(testImage,cvPoint((int)ft[i].pcx,(int)ft[i].pcy),2,CV_RGB(255,255,0),1,8,0);
	    cvCircle(testImage,cvPoint((int)ft[i].cx,(int)ft[i].cy),2,CV_RGB(0,255,0),1,8,0);
	    cvLine(testImage,cvPoint((int)ft[i].pcx,(int)ft[i].pcy),cvPoint((int)ft[i].cx,(int)ft[i].cy),CV_RGB(0,0,255),1,8,0);
	    //printf("%.0f %.0f %.0f %.0f\n",ft[i].pcx,ft[i].pcy,ft[i].cx,ft[i].cy);
	  }
	  ftstate = 0;
	}
      }
      if(pxset_imgfeature_query(cameraid) == 1) {
	ftstate = 1;
      }
      //!featurelog

      mat = cvEncodeImage(".jpeg",testImage,param); 
      unsigned char *buff = mat->data.ptr;
      int buffsize = mat->step;
      write(client_sockfd,buff,buffsize);	
      //printf("CPU0:image:%d %d\n",count,buffsize);
      count++;      
      cvReleaseMat(&mat);//20141101
    }             
  }
}

static void setup_timer() {
  struct sigaction action;
  struct itimerval timer;
  
  memset(&action, 0, sizeof(action));
  
  action.sa_handler = timerhandler;
  action.sa_flags = SA_RESTART;
  sigemptyset(&action.sa_mask);
  if(sigaction(SIGALRM, &action, NULL) < 0){
    perror("sigaction error");
    exit(1);
  }
  
  /* set intarval timer (10ms) */
  timer.it_value.tv_sec = 0;
  timer.it_value.tv_usec = 10000;
  timer.it_interval.tv_sec = 0;
  timer.it_interval.tv_usec = 10000;
  if(setitimer(ITIMER_REAL, &timer, NULL) < 0){
    perror("setitimer error");
    exit(1);
  }
}

void timerhandler(int i) {
  char c;  

  if(timer_disable == 1) {
    return;
  }

  pxset_keepalive();
  pxset_systemlog();

  //dualimage
  pxset_img_seq(cameraid);

  px_selfstate st;
  pxget_selfstate(&st);

  static unsigned long msec_cnt = 0;
  msec_cnt++;
  if(!(msec_cnt % 3)){
    printf("%.2f %.2f %.2f | %.2f %.2f %.2f | %.2f\n",st.degx,st.degy,st.degz,st.vision_tx,st.vision_ty,st.vision_tz,st.height);
  } 

  static int prev_operatemode = PX_HALT;
  static int idletime = 0;
  if((prev_operatemode == PX_UP) && (pxget_operate_mode() == PX_HOVER)) {
    pxset_visioncontrol_xy(st.vision_tx,st.vision_ty);
  }
  prev_operatemode = pxget_operate_mode();

  if(pxget_whisle_detect() == 1) {
    if(pxget_operate_mode() == PX_HOVER) {
      pxset_operate_mode(PX_DOWN);
    }      
    else if(pxget_operate_mode() == PX_HALT) {
      pxset_rangecontrol_z(180);
      pxset_operate_mode(PX_UP);		       
    }      
  }

  if(pxget_battery() == 1) {
    timer_disable = 1;
    //pxclose_chain();
    system("umount /mnt\n");
    system("shutdown -h now\n");   
    exit(1);
  }
    
  return;
}
